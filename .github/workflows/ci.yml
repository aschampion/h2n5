name: CI
on: [push, pull_request]

env:
  PROJ_NAME: h2n5

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt, clippy
          override: true
      - uses: Swatinem/rust-cache@v1
      - run: cargo clippy --all-features -- -D warnings
      - run: cargo fmt -- --check

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, 1.39.0]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - run: cargo build
      - run: cargo test -- --nocapture --quiet

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Publish to cargo
        run: cargo publish --token ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Release ${{ github.ref }}

  dist:
    name: dist (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: [publish]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            extension: ''
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-musl
            extension: ''
          - os: ubuntu-18.04
            target: aarch64-unknown-linux-gnu
            extension: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            extension: ''

    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} --release

      - name: Rename binary
        env:
          INPUT_BIN: ${{ env.PROJ_NAME }}${{ matrix.extension }}
        run: |
          cp target/${{ matrix.target }}/release/${{ env.INPUT_BIN }} ${{ env.INPUT_BIN }}-${{ matrix.target }}
          tar -czvf ${{ env.PROJ_NAME }}-${{ matrix.target }}.tgz ${{ env.INPUT_BIN }}-${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        env:
          INPUT_BIN: ${{ env.PROJ_NAME }}${{ matrix.extension }}
        with:
          name: ${{ env.INPUT_BIN }}-${{ matrix.target }}
          path: ${{ env.INPUT_BIN }}-${{ matrix.target }}

      - name: Upload binary to release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.PROJ_NAME }}-${{ matrix.target }}.tgz
          asset_name: ${{ env.PROJ_NAME }}-${{ matrix.target }}.tgz
          tag: ${{ github.ref }}
          overwrite: true
